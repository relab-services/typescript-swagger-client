<%
const { schema, modelTypes, utils, config } = it;
const { formatDescription, require, _, Ts } = utils;


const buildGenerics = (contract) => {
  if (!contract.genericArgs || !contract.genericArgs.length) return '';

  return '<' + contract.genericArgs.map(({ name, default: defaultType, extends: extendsType }) => {
    return [
      name,
      extendsType && `extends ${extendsType}`,
      defaultType && `= ${defaultType}`,
    ].join('')
  }).join(',') + '>'
}

const fixTypeName = (source) => {
  let parts = (source ?? '').split('_').filter(Boolean);
  parts = (parts.join('.') ?? '').split('.').filter(Boolean);
  return parts.length > 0 ? parts[parts.length - 1] : source;
}

const dataContractTemplates = {
  enum: (contract) => {
    return `enum ${fixTypeName(contract.name)} {\r\n${contract.content} \r\n }`;
  },
  interface: (contract) => {
    return `interface ${fixTypeName(contract.name)}${buildGenerics(contract)} {\r\n${contract.content}}`;
  },
  type: (contract) => {
    return `type ${fixTypeName(contract.name)}${buildGenerics(contract)} = ${contract.content}`;
  }
}

%>

<% if (config.internalTemplateOptions.addUtilRequiredKeysType) { %>
type <%~ config.Ts.CodeGenKeyword.UtilRequiredKeys %><T, K extends keyof T> = Omit<T, K> & Required<Pick<T, K>>
<% } %>

<% for (const contract of modelTypes) { %>
  <%
    let schemaPath = (contract.$schemaPath ? contract.$schemaPath[0]: undefined)?.replace(/\.(\d+?)\./g, 'T$1');

    let namespace = '';

    let schemaPathParts = schemaPath?.split('.').filter(Boolean)
    if (schemaPathParts && schemaPathParts.length > 1) {
      namespace = schemaPathParts.slice(0, schemaPathParts.length - 1).join('.');
    }

    if (!namespace && contract.typeName) {
      schemaPathParts = contract.typeName.split('.').filter(Boolean)
      if (schemaPathParts && schemaPathParts.length > 1) {
        namespace = schemaPathParts.slice(0, schemaPathParts.length - 1).join('.');
      }
    }
  %>

  <% if (namespace) {  %> export namespace Dto.<%= namespace %> { <% } %>
  <% if (!namespace) { %> export namespace Dto { <% } %>
    <%~ includeFile('./data-contract-jsdoc.ejs', { ...it, data: { ...contract, ...contract.typeData } }) %>
    <%~ contract.internal ? '' : 'export'%> <%~ (dataContractTemplates[contract.typeIdentifier] || dataContractTemplates.type)(contract) %>
  }

  <% if (contract.typeData.type === 'object' || contract.typeData.type === 'primitive') { %>
  export function parse_<%= contract.name.replace(/\W+/g, '_') %>(source: <%= contract.name %>){
      if (source) {
        <% if (contract.allOf && Array.isArray(contract.allOf)) { %>
          <% for (const item of contract.allOf) { %>
            <% if (item.$parsed?.name && item.$parsed.name.toLowerCase().startsWith('dto.')) { %>
              source = parse_<%= item.$parsed.name.replace(/\W+/g, '_') %>(source) as <%= contract.name %>;
            <% } %>
            <% if (item.properties) { %>
              <% for (const [name, property] of Object.entries(item.properties)) {
                const refSchema = modelTypes.find(x => x.name === property.$parsed.name);
                if (refSchema && refSchema.type === 'enum') {
                  continue;
                }
              %>
              <% if (property.format === 'date-time') { %>
                source.<%= name %> = source.<%= name %> && !(source.<%= name %> as unknown instanceof Date) ? new Date(source.<%= name %>) : source.<%= name %>;
                if (source.<%= name %> && isNaN(source.<%= name %>.getTime())) {
                throw new Error(`Wrong server response. Invalid date field <%= name %>: ${source.<%= name %>}`);
                }
              <% } else if (false && property.format === 'int32') { %>
                source.<%= name %> = source.<%= name %> ? parseInt(String(source.<%= name %>)) : source.<%= name %>;
              <% } else if (false && property.format === 'float') { %>
                source.<%= name %> = source.<%= name %> ? parseFloat(String(source.<%= name %>)) : source.<%= name %>;
              <% } else if (property.type === 'array' && property.items && property.items.$ref && property.items.$parsed) { %>
                source.<%= name %> = source.<%= name %> ? source.<%= name %>.map(parse_<%= property.items.$parsed.name.replace(/\W+/g, '_') %>) : source.<%= name %>;
              <% } else if (property.$ref && property.$parsed) { %>
                source.<%= name %> = source.<%= name %> ? parse_<%= property.$parsed.name.replace(/\W+/g, '_') %>(source.<%= name %>) : source.<%= name %>;
              <% } %>
            <% } %>
            <% } %>
          <% } %>
        <% } %>

        <% for (const [name, property] of Object.entries(contract.properties || {})) {
             const refSchema = modelTypes.find(x => x.name === property.$parsed.name);
             if (refSchema && refSchema.type === 'enum') {
               continue;
             }
        %>
          <% if (property.format === 'date-time') { %>
            source.<%= name %> = source.<%= name %> && !(source.<%= name %> as unknown instanceof Date) ? new Date(source.<%= name %>) : source.<%= name %>;
            if (source.<%= name %> && isNaN(source.<%= name %>.getTime())) {
              throw new Error(`Wrong server response. Invalid date field <%= name %>: ${source.<%= name %>}`);
            }
          <% } else if (false && property.format === 'int32') { %>
            source.<%= name %> = source.<%= name %> ? parseInt(String(source.<%= name %>)) : source.<%= name %>;
          <% } else if (false && property.format === 'float') { %>
            source.<%= name %> = source.<%= name %> ? parseFloat(String(source.<%= name %>)) : source.<%= name %>;
          <% } else if (property.type === 'array' && property.items && property.items.$ref && property.items.$parsed) { %>
            source.<%= name %> = source.<%= name %> ? source.<%= name %>.map(parse_<%= property.items.$parsed.name.replace(/\W+/g, '_') %>) : source.<%= name %>;
          <% } else if (property.$ref && property.$parsed) { %>
            source.<%= name %> = source.<%= name %> ? parse_<%= property.$parsed.name.replace(/\W+/g, '_') %>(source.<%= name %>) : source.<%= name %>;
          <% } %>
        <% } %>
      }
      return source;
    }
  <% } %>

<% } %>
